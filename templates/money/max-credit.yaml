starterNode: webhook
nodes:
  webhook:
    type: webhook
    parameters:
      path: /max-credit
      method: post
      validation:
        body:
          type: object
          properties:
            document:
              type: string
            product:
              type: string
              pattern: ^prod_\w+$
            metadata:
              type: object
              properties:
                bypassLoan:
                  type: string
                  pattern: ^loan_\w+$
                limitPerInstallmentReduction:
                  type: number
                  minimum: 0
                  maximum: 9007199254740991
                firstDueDate:
                  type: string
                  format: date
          required:
            - document
            - product
      next: set-ctx-constants
  set-ctx-constants:
    type: function
    parameters:
      code: |-
        $.ctx.eligibility = []
        $.ctx.IOF = 0.0038
        $.ctx.CONSIGNABLE_MARGIN = 0.35
        $.ctx.OPTIONAL_INSURANCE_FEE = 0.045
        $.ctx.REGISTER_FEE = 100
        $.ctx.LOANS_STATUS = ['open', 'pending', 'disbursed', 'disbursing']
        $.ctx.HTTP_REQUEST_TIMEOUT = 5000
        const base39 = {
          baseUrl: $.secrets.base39BaseUrl
        }
        $.ctx.base39 =  base39
      next: find-customer
  find-customer:
    type: http-request
    parameters:
      timeout: "{{ $.ctx.constants.HTTP_REQUEST_TIMEOUT }}"
      method: GET
      url: "{{ $.ctx.base39.baseUrl }}/customers"
      headers: &base39ApiHeader
        "Content-Type": application/json
        "accept": "application/json"
        "x-api-key": "{{ $.secrets.base39ApiKey }}"
      queryParameters:
        document: "{{ $.nodes.webhook[0].output.body.document }}"
      ignoreResponseCode: true
      next: check-customer
  check-customer:
    type: conditional
    parameters:
      conditions:
        - next: response-error
          expressions:
            - leftValue: '{{ $.nodes."find-customer"[0].output.responseData.data }}'
              operation: empty
      default: find-customer-age-group
  find-customer-age-group:
    type: function
    parameters:
      code: |
        const { startOfDay, differenceInYears } = require('date-fns')
        const birthDate = startOfDay(new Date($.nodes['find-customer'][0].output.responseData.data[0].birthDate))

        return differenceInYears(startOfDay(new Date()), birthDate)
      next: check-customer-age-group
  check-customer-age-group:
    type: conditional
    parameters:
      conditions:
        - next: response-error
          expressions:
            - leftValue: '{{ $.nodes."find-customer-age-group"[0].output }}'
              operation: less
              rightValue: 18
            - leftValue: '{{ $.nodes."find-customer-age-group"[0].output }}'
              operation: greater
              rightValue: 65
      default: find-employments
  find-employments:
    type: http-request
    parameters:
      timeout: "{{ $.ctx.constants.HTTP_REQUEST_TIMEOUT }}"
      method: GET
      headers: *base39ApiHeader
      url: "{{ $.ctx.base39.baseUrl }}/employments"
      queryParameters:
        document: "{{ $.nodes.webhook[0].output.body.document }}"
      ignoreResponseCode: true
      next: check-employments
  check-employments:
    type: conditional
    parameters:
      conditions:
        - next: response-error
          expressions:
            - leftValue: '{{ $.nodes."find-employments"[0].output.responseData.data }}'
              operation: empty
      default: find-companies
  find-companies:
    type: loop
    parameters:
      items: '{{ $.nodes."find-employments"[0].output.responseData.data[*].company }}'
      starterNode: find-company
      concurrency: 10
      next: find-product
  find-company:
    type: http-request
    parameters:
      timeout: "{{ $.ctx.constants.HTTP_REQUEST_TIMEOUT }}"
      method: GET
      headers: *base39ApiHeader
      url: "{{ $.ctx.base39.baseUrl }}/companies/{{ $.flow.loop.item }}"
      ignoreResponseCode: true
  find-product:
    type: http-request
    parameters:
      timeout: "{{ $.ctx.constants.HTTP_REQUEST_TIMEOUT }}"
      method: GET
      headers: *base39ApiHeader
      url: "{{ $.ctx.base39.baseUrl }}/products/{{ $.nodes.webhook[0].output.body.product }}"
      ignoreResponseCode: true
      next: check-product
  check-product:
    type: conditional
    parameters:
      conditions:
        - next: response-error
          expressions:
            - leftValue: '{{ $.nodes."find-product"[0].output.status }}'
              operation: not-equal
              rightValue: 200
        - next: response-error-metadata
          operator: or
          expressions:
            - leftValue: '{{ $.nodes."find-product"[0].output.responseData.metadata.iof }}'
              operation: not-present
            - leftValue: '{{ $.nodes."find-product"[0].output.responseData.metadata.monthlyFee }}'
              operation: not-present
            - leftValue: '{{ $.nodes."find-product"[0].output.responseData.metadata.maxNumberOfInstallments }}'
              operation: not-present
      default: find-loans-loop
  find-loans-loop:
    type: loop
    parameters:
      items: "{{ $.ctx.LOANS_STATUS }}"
      starterNode: find-loans
      concurrency: 10
      next: filter-loans
  find-loans:
    type: http-request
    parameters:
      timeout: "{{ $.ctx.constants.HTTP_REQUEST_TIMEOUT }}"
      method: GET
      headers: *base39ApiHeader
      queryParameters:
        customer: '{{ $.nodes."find-customer"[0].output.responseData.data[0].id }}'
        status: "{{ $.flow.loop.item }}"
        limit: 100
        starting_after: '{{ $.flow.nodes."find-loans"[-1].output.responseData.data[-1].id }}'
      url: "{{ $.ctx.base39.baseUrl }}/loans"
      next: find-loans-check-pagination
  find-loans-check-pagination:
    type: conditional
    parameters:
      conditions:
        - next: find-loans
          expressions:
            - leftValue: '{{ $.flow.nodes."find-loans"[-1].output.responseData.hasMore }}'
              operation: equal
              rightValue: true
  filter-loans:
    type: function
    parameters:
      code: |
        const bypassLoan = $.nodes.webhook[0].output.body.metadata?.bypassLoan
        const findLoansExecutions = $.nodes["find-loans"]

        const loans = []

        findLoansExecutions.forEach(execution => {
          loans.push(...execution.output.responseData.data)
        })

        if (bypassLoan) {
          const item = loans.find(loan => loan.id === bypassLoan)
          const index = loans.indexOf(item);
          if (index > -1) {
            loans.splice(index, 1);
          }
        }

        function filterByStatus(loans, status) {
          return loans.filter(loan => loan.status === status)
        }

        function filterByproductId(loans, id) {
          return loans.filter(loan => loan.offer.product === id)
        }

        return {
          openedLoans: filterByStatus(loans, 'open'),
          pendingLoans: filterByStatus(loans, 'pending'),
          disbursedLoans: filterByStatus(loans, 'disbursed'),
          disbursingLoans: filterByStatus(loans, 'disbursing'),
          voidLoans: filterByStatus(loans, 'void'),
          loansWithProduct: filterByproductId(loans, $.nodes.webhook[0].output.body.product)
        }
      next: calculate-loop
  calculate-loop:
    type: loop
    parameters:
      items: '{{ $.nodes."find-employments"[0].output.responseData.data[*] }}'
      starterNode: calculate-dates
      concurrency: 10
      next: webhook-response
  calculate-dates:
    type: function
    parameters:
      code: |
        const { startOfDay, differenceInMonths, addMinutes, differenceInDays, startOfMonth} = require('date-fns')
        const predefinedFirstDueDate = $.nodes.webhook[0].output.metadata?.firstDueDate

        $.ctx.employmentCompany = $.nodes['find-company'].find(execution => execution.output.responseData.id === $.flow.loop.item.company )?.output.responseData
        const contractPaymentDay = $.ctx.employmentCompany?.metadata?.contractPaymentDay || 10

        function createDate(stringDate) {
          return startOfDay(stringDate ? new Date(stringDate) : new Date())
        }

        function calculateCompanyFirstDueDate() {
          const currentDate = createDate()
          return new Date(currentDate.getFullYear(), currentDate.getMonth() + 2, contractPaymentDay)
        }

        return {
          firstDueDate: predefinedFirstDueDate || calculateCompanyFirstDueDate()
        }
      next: sum-loans
  sum-loans:
    type: function
    parameters:
      code: |
        const disbursedLoans = $.nodes["filter-loans"][0].output.disbursedLoans.filter(loan => loan.employment === $.flow.loop.item.id)
        const disbursingLoans = $.nodes["filter-loans"][0].output.disbursingLoans.filter(loan => loan.employment === $.flow.loop.item.id)
        const openedLoans = $.nodes["filter-loans"][0].output.openedLoans.filter(loan => loan.employment === $.flow.loop.item.id)
        const pendingLoans = $.nodes["filter-loans"][0].output.pendingLoans.filter(loan => loan.employment === $.flow.loop.item.id)

        const inProgressStatus = ['open', 'disbursing', 'pending']
        const loansWithProductInProgress = $.nodes["filter-loans"][0].output.loansWithProduct.filter(loan => loan.employment === $.flow.loop.item.id && inProgressStatus.includes(loan.status))

        function isInstallmentUnpaid(installment){
          return installment.status === 'unpaid'
        }

        function sumInstallmentValue(acc, loan) {
          const unpaidInstallment = loan.installments.data.find(installment => installment.status === 'unpaid')
          return acc + (unpaidInstallment?.totalAmount || 0)
        }

        function sumUnpaindInstallments(acc, installment) {
          return acc + (isInstallmentUnpaid(installment) ? installment.principalAmortizationAmount : 0)
        }

        function sumInstallmentsTotalAmount(acc, loan) {
          return acc + loan.installments.data.reduce(sumUnpaindInstallments, 0)
        }
        const totalAmount = [
          ...disbursedLoans,
          ...openedLoans,
        ].reduce(sumInstallmentsTotalAmount, 0)

        const totalInstallmentPerMonth = [
          ...disbursedLoans,
          ...openedLoans,
        ].reduce(sumInstallmentValue, 0)

        const totalDisbursedLoans = $.nodes["filter-loans"][0].output.disbursedLoans.length

        return {
          totalInstallmentPerMonth,
          totalAmount,
          totalDisbursedLoans,
          loansWithProductInProgress
        }
      next: verify-employment
  verify-employment:
    type: function
    parameters:
      code: |
        const { loansWithProductInProgress } = $.flow.nodes["sum-loans"][0].output
        const customerAge = $.nodes['find-customer-age-group'][0].output

        const hasProductInProgress = loansWithProductInProgress.length
        const isEmploymentNotWorking = $.flow.loop.item.status !== 'working'
        const companyIsInactive = $.ctx.employmentCompany.status === 'inactive'
        const customerIsNotInAgeGroup = customerAge < 18 || customerAge > 65

        const isEmploymentUnavailable = hasProductInProgress ||
          isEmploymentNotWorking ||
          companyIsInactive ||
          customerIsNotInAgeGroup

        return {
          hasProductInProgress,
          isEmploymentNotWorking,
          companyIsInactive,
          customerIsNotInAgeGroup,
          isEmploymentUnavailable
        }
      next: calculate-max-installment
  calculate-max-installment:
    type: function
    parameters:
      code: |
        const { isEmploymentUnavailable } = $.flow.nodes["verify-employment"][0].output
        const limitPerInstallment = $.flow.loop.item?.limitPerInstallment

        if( isEmploymentUnavailable ) {
          return 0
        }

        function getConsignableMargin() {
          const limitPerInstallment = $.flow.loop.item?.limitPerInstallment
          return limitPerInstallment || calculateConsignableMargin()
        }

        function calculateConsignableMargin() {
          const marginPercent = $.nodes['find-product'][0].output.responseData?.metadata?.consignableMargin || $.ctx.CONSIGNABLE_MARGIN
          const payableMarginValue = $.nodes.webhook[0].output.metadata?.limitPerInstallmentReduction
          const netSalary = $.flow.loop.item.netSalary || 0

          return (netSalary * marginPercent) - payableMarginValue
        }

        const estimatedMaxInstallment = getConsignableMargin()
        const maxInstallmentReduction = $.nodes["sum-loans"][0].output.totalInstallmentPerMonth

        return Math.max(estimatedMaxInstallment - maxInstallmentReduction, 0)
      next: calculate-max-credit
  calculate-max-credit:
    type: function
    parameters:
      code: |
        const { differenceInDays, startOfDay, addMonths } = require('date-fns')
        const BigNumber = require('bignumber.js')

        const { iof, monthlyFee, maxNumberOfInstallments } = $.nodes['find-product'][0].output.responseData.metadata

        const { isEmploymentUnavailable } = $.flow.nodes["verify-employment"][0].output

        if( isEmploymentUnavailable ) {
          return 0
        }

        const limitPerLoan = $.flow.loop.item?.limitPerLoan || false

        function calculateEstimatedMaxCredit() {
          const { firstDueDate } = $.flow.nodes["calculate-dates"][0].output
          const { monthlyFee, maxNumberOfInstallments } = $.nodes['find-product'][0].output.responseData.metadata
          const maxInstallmentValue = $.flow.nodes["calculate-max-installment"][0].output

          let installmentsWithoutFee = 0
          for (let installment = 1; installment <= maxNumberOfInstallments; installment++) {
            const datam = addMonths(startOfDay(new Date(firstDueDate)), installment)
            const diffDays = differenceInDays(datam, startOfDay(new Date()))
            const monthlyFeeMultiplier = (monthlyFee / 100) + 1
            const diffInMonths = new BigNumber(diffDays).dividedBy(30)
            const compondFee = Math.pow(monthlyFeeMultiplier, diffInMonths.toNumber())
            installmentsWithoutFee += Math.pow(compondFee, -1)
          }

          return installmentsWithoutFee * maxInstallmentValue
        }

        function calculateInsurance(creditValue) {
          const insuranceType = 'REQUIRED'

          if (insuranceType === 'REQUIRED' || insuranceType === 'UNINSURED') {
            return 0
          }

          return new BigNumber(creditValue)
            .times($.ctx.OPTIONAL_INSURANCE_FEE)
            .decimalPlaces(2)
            .toNumber()
        }

        function getRegisterFee() {
          const { totalDisbursedLoans } = $.flow.nodes["sum-loans"][0].output
          const registerFee = $.ctx.REGISTER_FEE
          if(totalDisbursedLoans > 0) {
            return 0
          }

          return registerFee
        }

        const estimatedMaxCredit = calculateEstimatedMaxCredit()

        const maxCredit = Math.max(estimatedMaxCredit - calculateInsurance(estimatedMaxCredit) - getRegisterFee(), 0)

        if (limitPerLoan) {
          return Math.min(maxCredit, limitPerLoan)
        }

        return maxCredit
      next: round-values
  round-values:
    type: function
    parameters:
      code: |
        const maxInstallment = $.flow.nodes['calculate-max-installment'][0].output
        const maxCredit = $.flow.nodes['calculate-max-credit'][0].output
        const { maxNumberOfInstallments } = $.nodes['find-product'][0].output.responseData.metadata
        function roundByPlaceValue(maxCredit) {
          const place = Math.trunc(Math.round((100 * Math.log(maxCredit)) / Math.log(10)) / 100)
          const placeValue = place < 2 ? 1 : Math.pow(10, place - 1)
          return Math.max(Math.floor(maxCredit / placeValue) * placeValue, 0)
        }
        return {
          maxInstallment: roundByPlaceValue(maxInstallment),
          maxCredit: roundByPlaceValue(maxCredit),
          minInstallmentValue: 0,
        }
      next: verify-availability
  verify-availability:
    type: function
    parameters:
      code: |
        const { maxCredit, maxInstallment, minInstallmentValue } = $.flow.nodes['round-values'][0].output
        const minLoanAmount = $.nodes['find-product'][0].output.responseData.metadata.minLoanAmount

        const { hasProductInProgress, isEmploymentNotWorking, companyIsInactive, customerIsNotInAgeGroup } = $.flow.nodes["verify-employment"][0].output

        function availability(reason) {
          return {
            available: !reason,
            reason
          }
        }

        if (hasProductInProgress) {
          return availability('Customer has a loan in progress.')
        }

        if (isEmploymentNotWorking) {
          return availability('Employee not working.')
        }

        if (companyIsInactive) {
          return availability('Company is not active.')
        }

        if (customerIsNotInAgeGroup) {
          return availability('Customer is under 18 or over 65.')
        }

        if (maxCredit < minLoanAmount) {
          return availability('Calculated max credit is less than the minimum allowed.')
        }

        if (maxInstallment < minInstallmentValue) {
          return availability('Calculated max installment is less than the minimum allowed.')
        }

        return availability()
      next: bind-response
  bind-response:
    type: function
    parameters:
      code: |
        const { maxCredit, maxInstallment, minInstallmentValue } = $.flow.nodes['round-values'][0].output
        const { maxNumberOfInstallments, minNumberOfInstallments, minLoanAmount } = $.nodes['find-product'][0].output.responseData.metadata
        const termsAndConditions = $.nodes['find-product'][0].output.responseData?.termsAndConditions
        const { available, reason } = $.flow.nodes['verify-availability'][0].output
        $.ctx.eligibility.push({
          slug: $.nodes['find-product'][0].output.responseData.slug || '',
          name: $.nodes['find-product'][0].output.responseData.name || '',
          description:$.nodes['find-product'][0].output.responseData.description || '',
          maxLoanAmount: maxCredit || 0,
          minLoanAmount: minLoanAmount || 0,
          maxNumberOfInstallments: maxNumberOfInstallments || 0,
          minNumberOfInstallments: minNumberOfInstallments || 0,
          maxInstallmentValue: maxInstallment || 0,
          minInstallmentValue: minInstallmentValue || 0,
          customer: $.nodes['find-customer'][0].output.responseData.data[0].id,
          employment: $.flow.loop.item.id,
          available,
          metadata: {
            ...(reason ? { reason } : {})
          },
          termsAndConditions: termsAndConditions || '',
        })
  webhook-response:
    type: webhook-response
    parameters:
      statusCode: 200
      body:
        data: "{{ $.ctx.eligibility }}"
  response-error:
    type: webhook-response
    parameters:
      statusCode: 404
      body:
        data: []
  response-error-metadata:
    type: webhook-response
    parameters:
      statusCode: 400
      body:
        message: Erro o produto não possui cadastro de metadados.
