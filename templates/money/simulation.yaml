creditPolicies: &creditPoliciesCode |
  $.ctx.creditPolicies = [
    {
      "name": "Adiantamento Salarial - PT",
      "maxWorkingMonths": 10,
      "minWorkingMonths": 1,
      "salaryQtd": 0.4,
      "minCreditRequestAmount": 1,
      "monthlyAndRegisterFee": [
        {
          "insuranceType": "uninsured",
          "minMonth": 1,
          "maxMonth": 60,
          "monthlyFee": 1,
          "registerFee": 1,
          "fund": "fund_637b85aaa8e91c82fd053aac",
        }
      ]
    },
    {
      "name": "Default",
      "maxWorkingMonths": 999,
      "minWorkingMonths": 1,
      "salaryQtd": 10000,
      "minCreditRequestAmount": 100,
      "monthlyAndRegisterFee": [
        {
          "insuranceType": "uninsured",
          "minMonth": 1,
          "maxMonth": 20,
          "monthlyFee": 0.7,
          "registerFee": 5,
          "fund": "fund_637b85aaa8e91c82fd053aac",
        },
        {
          "insuranceType": "optional",
          "minMonth": 21,
          "maxMonth": 32,
          "monthlyFee": 1.0,
          "registerFee": 10,
          "fund": "fund_637b85aaa8e91c82fd053aac",
        },
        {
          "insuranceType": "required",
          "minMonth": 33,
          "maxMonth": 42,
          "monthlyFee": 1.5,
          "registerFee": 15,
          "fund": "fund_637b85aaa8e91c82fd053aac",
        }
      ],
    },
  ]

ctxConstants: &ctxConstantsCode |
  $.ctx.offers = []
  $.ctx.constants = {
    MONTHLY_RATE: 0.01,
    CONTRACT_FINE_RATE: 0.02,
    OPTIONAL_INSURANCE_FEE: 0.045,
    REQUIRED_INSURANCE_FEE: 0.0179,
    INSURANCE_INSURER: 'usebens',
    HTTP_REQUEST_TIMEOUT: 90000,
    DECIMAL_PLACES: 3,
    BIG_NUMBER_CONFIG: {
      ROUNDING_MODE: 1,
    },
    HOLIDAYS: [
      '2022-11-02',
      '2022-11-15',
      '2022-12-25',
      '2023-01-01',
      '2023-02-20',
      '2023-02-21',
      '2023-04-07',
      '2023-04-21',
      '2023-05-01',
      '2023-06-08',
      '2023-09-07',
      '2023-10-12',
      '2023-11-02',
      '2023-11-15',
      '2023-12-25',
      '2024-01-01',
      '2024-02-12',
      '2024-02-13',
      '2024-03-29',
      '2024-04-21',
      '2024-05-01',
      '2024-05-30',
      '2024-09-07',
      '2024-10-12',
      '2024-11-02',
      '2024-11-15',
      '2024-12-25',
      '2025-01-01',
      '2025-03-03',
      '2025-03-04',
      '2025-04-18',
      '2025-04-21',
      '2025-05-01',
      '2025-06-19',
      '2025-09-07',
      '2025-10-12',
      '2025-11-02',
      '2025-11-15',
      '2025-12-25',
      '2026-01-01',
      '2026-02-16',
      '2026-02-17',
      '2026-04-03',
      '2026-04-21',
      '2026-05-01',
      '2026-06-04',
      '2026-09-07',
      '2026-10-12',
      '2026-11-02',
      '2026-11-15',
      '2026-12-25',
      '2027-01-01',
      '2027-02-08',
      '2027-02-09',
      '2027-03-26',
      '2027-04-21',
      '2027-05-01',
      '2027-05-27',
      '2027-09-07',
      '2027-10-12',
      '2027-11-02',
      '2027-11-15',
      '2027-12-25',
      '2028-01-01',
      '2028-02-28',
      '2028-02-29',
      '2028-04-14',
      '2028-04-21',
      '2028-05-01',
      '2028-06-15',
      '2028-09-07',
      '2028-10-12',
      '2028-11-02',
      '2028-11-15',
      '2028-12-25',
      '2029-01-01',
      '2029-02-12',
      '2029-02-13',
      '2029-03-30',
      '2029-04-21',
      '2029-05-01',
      '2029-05-31',
      '2029-09-07',
      '2029-10-12',
      '2029-11-02',
      '2029-11-15',
      '2029-12-25',
      '2030-01-01',
      '2030-03-04',
      '2030-03-05',
      '2030-04-19',
      '2030-04-21',
      '2030-05-01',
      '2030-06-20',
      '2030-09-07',
      '2030-10-12',
      '2030-11-02',
      '2030-11-15',
      '2030-12-25',
      '2031-01-01',
      '2031-02-24',
      '2031-02-25',
      '2031-04-11',
      '2031-04-21',
      '2031-05-01',
      '2031-06-12',
      '2031-09-07',
      '2031-10-12',
      '2031-11-02',
      '2031-11-15',
      '2031-12-25',
      '2032-01-01',
      '2032-02-09',
      '2032-02-10',
      '2032-03-26',
      '2032-04-21',
      '2032-05-01',
      '2032-05-27',
      '2032-09-07',
      '2032-10-12',
      '2032-11-02',
      '2032-11-15',
      '2032-12-25',
      '2033-01-01',
      '2033-02-28',
      '2033-03-01',
      '2033-04-15',
      '2033-04-21',
      '2033-05-01',
      '2033-06-16',
      '2033-09-07',
      '2033-10-12',
      '2033-11-02',
      '2033-11-15',
      '2033-12-25',
      '2034-01-01',
      '2034-02-20',
      '2034-02-21',
      '2034-04-07',
      '2034-04-21',
      '2034-05-01',
      '2034-06-08',
      '2034-09-07',
      '2034-10-12',
      '2034-11-02',
      '2034-11-15',
      '2034-12-25',
      '2035-01-01',
      '2035-02-05',
      '2035-02-06',
      '2035-03-23',
      '2035-04-21',
      '2035-05-01',
      '2035-05-24',
      '2035-09-07',
      '2035-10-12',
      '2035-11-02',
      '2035-11-15',
      '2035-12-25',
      '2036-01-01',
      '2036-02-25',
      '2036-02-26',
      '2036-04-11',
      '2036-04-21',
      '2036-05-01',
      '2036-06-12',
      '2036-09-07',
      '2036-10-12',
      '2036-11-02',
      '2036-11-15',
      '2036-12-25',
      '2037-01-01',
      '2037-02-16',
      '2037-02-17',
      '2037-04-03',
      '2037-04-21',
      '2037-05-01',
      '2037-06-04',
      '2037-09-07',
      '2037-10-12',
      '2037-11-02',
      '2037-11-15',
      '2037-12-25',
      '2038-01-01',
      '2038-03-08',
      '2038-03-09',
      '2038-04-21',
      '2038-04-23',
      '2038-05-01',
      '2038-06-24',
      '2038-09-07',
      '2038-10-12',
      '2038-11-02',
      '2038-11-15',
      '2038-12-25',
      '2039-01-01',
      '2039-02-21',
      '2039-02-22',
      '2039-04-08',
      '2039-04-21',
      '2039-05-01',
      '2039-06-09',
      '2039-09-07',
      '2039-10-12',
      '2039-11-02',
      '2039-11-15',
      '2039-12-25',
      '2040-01-01',
      '2040-02-13',
      '2040-02-14',
      '2040-03-30',
      '2040-04-21',
      '2040-05-01',
      '2040-05-31',
      '2040-09-07',
      '2040-10-12',
      '2040-11-02',
      '2040-11-15',
      '2040-12-25',
      '2041-01-01',
      '2041-03-04',
      '2041-03-05',
      '2041-04-19',
      '2041-04-21',
      '2041-05-01',
      '2041-06-20',
      '2041-09-07',
      '2041-10-12',
      '2041-11-02',
      '2041-11-15',
      '2041-12-25',
      '2042-01-01',
      '2042-02-17',
      '2042-02-18',
      '2042-04-04',
      '2042-04-21',
      '2042-05-01',
      '2042-06-05',
      '2042-09-07',
    ]
  }

base39ApiHeaders: &base39ApiHeaders
  Content-Type: application/json
  Accept: application/json
  x-api-key: "{{ $.secrets.base39ApiKey }}"

starterNode: request
nodes:
  request:
    type: webhook
    parameters:
      path: /v1/simulation
      method: POST
      validation:
        body:
          type: object
          properties:
            numberOfInstallments:
              type: array
              minItems: 1
              maxItems: 6
              items:
                type: number
                minimum: 6
                maximum: 48
            disbursementAmount:
              type: number
              minimum: 0
              maximum: 9007199254740991
            employment:
              type: string
              pattern: ^empl_\w+$
            product:
              type: string
              pattern: ^prod_\w+$
          required:
            - numberOfInstallments
            - disbursementAmount
            - employment
            - product
      next: set-ctx-constants
  set-ctx-constants:
    type: function
    parameters:
      code: *ctxConstantsCode
      next: set-ctx-functions
  set-ctx-functions:
    type: function
    parameters:
      code: |
        const jws = require('jws')
        const md5 = require('md5')
        const { v4: uuidV4 } = require('uuid')

        const constants = {
          apiKey: $.secrets.qitechApiClientKey,
          privateKey: $.secrets.qitechPrivateKey,
          publicKey: $.secrets.qitechPublicKey,
          passphrase: $.secrets.qitechPassphrase,
          algorithm: 'ES512',
          encoding: 'utf8',
        }

        const fixCert = cert => cert.replace(/\\n/g, '\n')

        const createAuthorization = (payload, path, contentType = 'application/json') => {
          const stringSignValues = {
            method: 'POST',
            contentType,
            currentDate: new Date().toUTCString(),
            path,
          }
          const signatureHeader = createSignature(payload, stringSignValues)
          return `QIT ${constants.apiKey}:${signatureHeader}`
        }

        const createSignature = (payload, stringSignValues) => {
          const stringToSign = [
            stringSignValues.method,
            md5(payload),
            stringSignValues.contentType,
            stringSignValues.currentDate,
            stringSignValues.path,
          ].join('\n')

          const headersToSign = {
            sub: constants.apiKey,
            signature: stringToSign,
          }

          return encrypt(headersToSign)
        }

        const encrypt = payload => {
          const signPayload = {
            ...payload,
            iat: payload.iat || Math.floor(Date.now() / 1000),
          }

          const header = Object.assign({
            alg: constants.algorithm,
            typ: 'JWT',
            kid: constants.keyid,
          })

          return jws.sign({
            header,
            payload: signPayload,
            secret: { key: fixCert(constants.privateKey), passphrase: constants.passphrase },
            encoding: constants.encoding,
          })
        }

        const decodeJwt = encodedJwt => {
          const decoded = jws.decode(encodedJwt, { complete: true })
          if (!decoded) {
            return null
          }
          let payload = decoded.payload

          if (typeof payload === 'string') {
            const obj = JSON.parse(payload)
            if (obj !== null && typeof obj === 'object') {
              payload = obj
            }
          }

          return {
            header: decoded.header,
            payload: payload,
            signature: decoded.signature,
          }
        }

        const decode = encodedResponse => {
          const isValid = jws.verify(
            encodedResponse,
            constants.algorithm,
            fixCert(constants.publicKey),
          )

          if (!isValid) {
            throw new Error('Invalid encoded response!')
          }

          const decodedToken = decodeJwt(encodedResponse)

          if (!decodedToken) {
            throw new Error('invalid token')
          }

          return decodedToken
        }

        $.ctx.encryptPayload = (requestPayload, path) => {
          const encodedBody = encrypt(requestPayload)

          return {
            authorization: createAuthorization(encodedBody, path),
            encodedBody,
          }
        }

        $.ctx.encryptFile = (buffer, requestHeaders) => {
          const headerToSign = {
            'content-type': `multipart/form-data; boundary=--------------------------${new Date().getTime()}`
          }

          const authorization = createAuthorization(buffer, '/upload', headerToSign['content-type'])

          const headers = {
            ...headerToSign,
            'API-CLIENT-KEY': $.secrets.qitech_api_client_key,
            Authorization: authorization
          }

          return {
            headers,
            body: {
              file: {
                data: buffer,
                fileName: `${uuidV4()}.${requestHeaders['content-type'].split('/')[1]}`
              }
            }
          }
        }

        $.ctx.decodeResponse = qiTechResponse => {
          const { encoded_body: encodedBody } = qiTechResponse
          return decode(encodedBody)
        }
      next: request-employment-data
  request-employment-data:
    type: http-request
    parameters:
      method: GET
      url: "{{ $.secrets.base39BaseUrl }}/v1/employments/{{ $.nodes.request[0].output.body.employment }}"
      headers: *base39ApiHeaders
      ignoreResponseCode: true
      queryParameters:
        document: '{{ $.nodes."request-customer-data"[0].output.responseData.document }}'
      timeout: "{{ $.ctx.constants.HTTP_REQUEST_TIMEOUT }}"
      next: check-employment-data
  check-employment-data:
    type: conditional
    parameters:
      conditions:
        - next: response-error-no-employment
          expressions:
            - leftValue: '{{ $.nodes."request-employment-data"[0].output.status }}'
              operation: not-equal
              rightValue: 200
      default: set-ctx-employment
  set-ctx-employment:
    type: function
    parameters:
      code: $.ctx.employment = $.nodes['request-employment-data'][0].output.responseData
      next: request-company-data
  request-company-data:
    type: http-request
    parameters:
      method: GET
      url: "{{ $.secrets.base39BaseUrl }}/v1/companies/{{ $.ctx.employment.company }}"
      headers: *base39ApiHeaders
      ignoreResponseCode: true
      timeout: "{{ $.ctx.constants.HTTP_REQUEST_TIMEOUT }}"
      next: calculate-dates
  check-request-company-data:
    type: conditional
    parameters:
      conditions:
        - next: response-error-no-company
          expressions:
            - leftValue: '{{ $.nodes."request-company-data"[0].output.responseData }}'
              operation: empty
      default: set-ctx-employment
  calculate-dates:
    type: function
    parameters:
      code: |
        const { startOfDay, differenceInMonths } = require('date-fns')

        const { payrollPaymentDay } = $.nodes["request-company-data"][0].output.responseData.settings
        const { hiredAt } = $.ctx.employment

        function createDate(stringDate) {
          return startOfDay(stringDate ? new Date(stringDate) : new Date())
        }

        function calculateEmployeeWorkingMonths() {
          return differenceInMonths(
            createDate(),
            createDate(hiredAt),
          )
        }

        function calculateCompanyFirstDueDate() {
          const currentDate = createDate()
          return new Date(currentDate.getFullYear(), currentDate.getMonth() + 2, payrollPaymentDay)
        }

        function calculateNextBusinessDay() {
          const date = createDate()

          do {
            date.setDate(date.getDate() + 1)
          } while (isWeekend(date) || isHoliday(date))

          return date
        }

        function isWeekend(date) {
          return !(date.getDay() % 6)
        }

        function isHoliday(date) {
          return $.ctx.constants.HOLIDAYS.includes(formatDate(date))
        }

        function formatDate(date) {
          return date.toISOString().split('T')[0]
        }

        return {
          workingMonths: calculateEmployeeWorkingMonths(),
          firstDueDate: formatDate(calculateCompanyFirstDueDate()),
          disbursementDate: formatDate(calculateNextBusinessDay()),
        }
      next: set-ctx-credit-policy-list
  set-ctx-credit-policy-list:
    type: function
    parameters:
      code: *creditPoliciesCode
      next: get-credit-policy
  get-credit-policy:
    type: function
    parameters:
      code: |
        const policies = $.ctx.creditPolicies
        const { workingMonths } = $.nodes["calculate-dates"][0].output

        const applyableCreditPolicies = policies.filter(policy => {
          const minWorkingMonthsRule = policy.minWorkingMonths <= workingMonths
          const maxWorkingMonthsRule = !policy.maxWorkingMonths || policy.maxWorkingMonths >= workingMonths
          return minWorkingMonthsRule && maxWorkingMonthsRule
        })

        return applyableCreditPolicies.length ? applyableCreditPolicies[0] : null
      next: check-credit-policy
  check-credit-policy:
    type: conditional
    parameters:
      conditions:
        - next: response-error-no-credit-policy
          expressions:
            - leftValue: '{{ $.nodes."get-credit-policy"[0].output }}'
              operation: not-present
        - next: response-error-min-credit-request
          expressions:
            - leftValue: "{{ $.nodes.request[0].output.body.disbursementAmount }}"
              operation: less
              rightValue: '{{ $.nodes."get-credit-policy"[0].output.minCreditRequestAmount }}'
      default: simulation-installment-loop
  simulation-installment-loop:
    type: loop
    parameters:
      items: "{{ $.nodes.request[0].output.body.numberOfInstallments }}"
      concurrency: 5
      starterNode: simulation-qitech-insurance-get-policy-rule
      next: response
  simulation-qitech-insurance-get-policy-rule:
    type: function
    parameters:
      code: |
        const installmentsNumber = $.flow.loop.item
        const creditPolicy = $.nodes["get-credit-policy"][0].output;

        const applyableRules = creditPolicy.monthlyAndRegisterFee
          .filter(
            rule =>
              rule.minMonth <= installmentsNumber && installmentsNumber <= rule.maxMonth
          )
          .sort((a, b) => b.maxMonth - a.maxMonth);

        if (!applyableRules.length) {
          // `No credit policy applies to ${installmentsNumber} installments.`
          return null;
        }

        return applyableRules[0];
      next: check-simulation-qitech-insurance-get-policy-rule
  check-simulation-qitech-insurance-get-policy-rule:
    type: conditional
    parameters:
      conditions:
        - next: create-installment-response-no-policy-rule
          expressions:
            - leftValue: '{{ $.flow.nodes."simulation-qitech-insurance-get-policy-rule"[0].output }}'
              operation: not-present
      default: simulation-credit-policy-insurance-type-loop-items
  simulation-credit-policy-insurance-type-loop-items:
    type: function
    parameters:
      code: |
        const policyRule = $.flow.nodes["simulation-qitech-insurance-get-policy-rule"][0].output
        const { insuranceType } = policyRule

        const withInsuranceOptions = []

        if (insuranceType === 'required' || insuranceType === 'optional') {
          withInsuranceOptions.push(true)
        }

        if (insuranceType === 'uninsured' || insuranceType === 'optional') {
          withInsuranceOptions.push(false)
        }

        return withInsuranceOptions.map(withInsurance => ({
          withInsurance,
          policyRule,
          installmentsNumber: $.flow.loop.item,
        }))
      next: simulation-credit-policy-insurance-type-loop
  simulation-credit-policy-insurance-type-loop:
    type: loop
    parameters:
      items: '{{ $.flow.nodes."simulation-credit-policy-insurance-type-loop-items"[0].output }}'
      concurrency: 2
      starterNode: simulation-qitech-insurance-calculate-insurance
  simulation-qitech-insurance-calculate-insurance:
    type: function
    parameters:
      code: |
        const { BigNumber } = require("bignumber.js");
        BigNumber.set($.ctx.constants.BIG_NUMBER_CONFIG);

        const { disbursementAmount } = $.nodes.request[0].output.body;
        const { withInsurance, policyRule: { insuranceType } } = $.flow.loop.item

        let fee = 0
        let optional = false

        if (withInsurance) {
          if (insuranceType === 'optional') {
            fee = $.ctx.constants.OPTIONAL_INSURANCE_FEE
            optional = true
          } else {
            fee = $.ctx.constants.REQUIRED_INSURANCE_FEE
          }
        }

        const value = new BigNumber(disbursementAmount)
          .times(fee)
          .decimalPlaces($.ctx.constants.DECIMAL_PLACES)
          .toNumber()

        return {
          fee,
          value,
          optional
        }
      next: simulation-qitech-create-payload
  simulation-qitech-create-payload:
    type: function
    parameters:
      code: |
        const { BigNumber } = require("bignumber.js")
        BigNumber.set($.ctx.constants.BIG_NUMBER_CONFIG)

        const { installmentsNumber, policyRule } = $.flow.loop.item
        const { disbursementAmount } = $.nodes.request[0].output.body
        const { firstDueDate, disbursementDate } = $.nodes["calculate-dates"][0].output
        const insurance = $.flow.nodes["simulation-qitech-insurance-calculate-insurance"][0].output

        function createRebates() {
          const rebates = [
            {
              amount: policyRule.registerFee,
              fee_type: "tac",
              amount_type: "absolute",
            },
          ];

          if (insurance.optional) {
            rebates.push({
              amount: insurance.value,
              fee_type: 'tac',
              amount_type: 'absolute',
              description: 'Prêmio de Seguro',
            })
          }

          return rebates;
        }

        function toPercentageValue(value) {
          return new BigNumber(value).dividedBy(100).toNumber();
        }

        return {
          borrower: {
            person_type: "natural",
          },
          financial: {
            rebates: createRebates(),
            monthly_interest_rate: toPercentageValue(policyRule.monthlyFee),
            fine_configuration: {
              interest_base: "calendar_days",
              monthly_rate: $.ctx.constants.MONTHLY_RATE,
              contract_fine_rate: $.ctx.constants.CONTRACT_FINE_RATE,
            },
            number_of_installments: installmentsNumber,
            interest_grace_period: 0,
            principal_grace_period: 0,
            disbursement_date: disbursementDate,
            disbursed_amount: disbursementAmount,
            interest_type: "pre_price_days",
            first_due_date: firstDueDate,
            credit_operation_type: "ccb",
          },
        };
      next: simulation-qitech-encrypt-payload
  simulation-qitech-encrypt-payload:
    type: function
    parameters:
      code: |
        const requestPayload = $.flow.nodes['simulation-qitech-create-payload'][0].output
        return $.ctx.encryptPayload(requestPayload, '/debt_simulation')
      next: simulation-qitech-request
  simulation-qitech-request:
    type: http-request
    parameters:
      method: POST
      url: "{{ $.secrets.qitechBaseUrl }}/debt_simulation"
      headers:
        API-CLIENT-KEY: "{{$.secrets.qitechApiClientKey}}"
        Authorization: '{{$.flow.nodes."simulation-qitech-encrypt-payload"[0].output.authorization}}'
        Accept: application/json
        Content-Type: application/json
      body:
        encoded_body: '{{$.flow.nodes."simulation-qitech-encrypt-payload"[0].output.encodedBody}}'
      timeout: "{{ $.ctx.constants.HTTP_REQUEST_TIMEOUT }}"
      ignoreResponseCode: true
      next: simulation-qitech-decrypt-response
  simulation-qitech-decrypt-response:
    type: function
    parameters:
      code: |
        const { responseData } = $.flow.nodes['simulation-qitech-request'][0].output
        return $.ctx.decodeResponse(responseData).payload
      next: simulation-qitech-check-response
  simulation-qitech-check-response:
    type: conditional
    parameters:
      conditions:
        - next: create-installment-response
          expressions:
            - leftValue: '{{$.flow.nodes."simulation-qitech-decrypt-response"[0].output.status}}'
              operation: equal
              rightValue: finished
      default: simulation-qitech-error-response
  simulation-qitech-error-response:
    type: function
    parameters:
      code: throw new Error(`Error at simulation of installment=${$.flow.loop.item.installmentsNumber}, withInsurance=${$.flow.loop.item.withInsurance}.`)
  create-installment-response:
    type: function
    parameters:
      code: |
        const BigNumber = require("bignumber.js")
        BigNumber.set($.ctx.constants.BIG_NUMBER_CONFIG)

        const { disbursementAmount } = $.nodes.request[0].output.body
        const { withInsurance, policyRule } = $.flow.loop.item
        const { disbursementDate } = $.nodes["calculate-dates"][0].output
        const insurance = $.flow.nodes["simulation-qitech-insurance-calculate-insurance"][0].output

        const qitechInstallment = $.flow.nodes["simulation-qitech-decrypt-response"][0].output.data
        const firstInstallment = qitechInstallment.installments[0];

        function isEmployeeCanRequestInstallmentAmount(installment) {
          const maxInstallmentValue = new BigNumber($.ctx.employment.limitPerInstallment)
          return new BigNumber(installment.total_amount).isLessThanOrEqualTo(maxInstallmentValue)
        }

        const calculatePercentageValue = value => {
          return new BigNumber(value)
            .multipliedBy(100)
            .decimalPlaces($.ctx.constants.DECIMAL_PLACES)
            .toNumber();
        };

        function createInsurance() {
          if (withInsurance) {
            return {
              type: policyRule.insuranceType,
              amount: insurance.value,
              fee: calculatePercentageValue(insurance.fee),
              number: $.secrets.insuranceNumber,
              insurer: $.ctx.constants.INSURANCE_INSURER,
            }
          }
          return {
              type: policyRule.insuranceType,
              amount: 0,
              fee: 0,
              number: '',
              insurer: '',
            }
        }

        function createRebates() {
          const rebates = [
            {
              feeType: 'tac',
              amountType: 'absolute',
              amount: policyRule.registerFee,
            }
          ];

          if (insurance.optional) {
            rebates.push({
              feeType: 'tac',
              amountType: 'absolute',
              description: 'Prêmio de Seguro',
              amount: insurance.value,
            })
          }

          return rebates;
        }

        const allowed = isEmployeeCanRequestInstallmentAmount(firstInstallment)

        $.ctx.offers.push({
          disbursementAmount,
          installmentAmount: allowed ? firstInstallment.total_amount : 0,
          description: allowed ? '' : 'Limite do valor da parcela excedido.',
          totalAmount: qitechInstallment.issue_amount,
          iofAmount: qitechInstallment.iof_amount,
          monthlyCET: calculatePercentageValue(qitechInstallment.cet),
          yearlyCET: calculatePercentageValue(qitechInstallment.annual_cet),
          monthlyFee: calculatePercentageValue(
            qitechInstallment.prefixed_interest_rate.monthly_rate
          ),
          yearlyFee: calculatePercentageValue(
            qitechInstallment.prefixed_interest_rate.annual_rate
          ),
          insurance: createInsurance(),
          interestType: qitechInstallment.interest_type,
          creditOperationType: 'ccb',
          expectedDisbursementDate: disbursementDate,
          interestGracePeriod: qitechInstallment.interest_grace_period,
          principalGracePeriod: qitechInstallment.principal_grace_period,
          numberOfInstallments: qitechInstallment.installments.length,
          firstDueDate: firstInstallment.due_date,
          fund: policyRule.fund,
          rebates: createRebates(),
          fine: {
            fineRate: $.ctx.constants.CONTRACT_FINE_RATE,
            interestBase: 'workdays',
            monthlyRate: $.ctx.constants.MONTHLY_RATE,
          },
          acquittanceLoans: {},
          product: $.nodes.request[0].output.body.product,
        });
  create-installment-response-no-policy-rule:
    type: function
    parameters:
      code: |
        const { disbursementAmount } = $.nodes.request[0].output.body
        const { disbursementDate } = $.nodes["calculate-dates"][0].output

        $.ctx.offers.push({
          disbursementAmount,
          installmentAmount: 0,
          description: 'Número de parcelas não elegível.',
          totalAmount: 0,
          iofAmount: 0,
          monthlyCET: 0,
          yearlyCET: 0,
          monthlyFee: 0,
          yearlyFee: 0,
          insurance: {
            type: '',
            amount: 0,
            fee: 0,
            number: '',
            insurer: '',
          },
          interestType: '',
          creditOperationType: 'ccb',
          expectedDisbursementDate: disbursementDate,
          interestGracePeriod: 0,
          principalGracePeriod: 0,
          numberOfInstallments: $.flow.loop.item,
          firstDueDate: '',
          fund: '',
          rebates: [
            {
              feeType: 'tac',
              amountType: 'absolute',
              amount: 0,
            }
          ],
          fine: {
            fineRate: $.ctx.constants.CONTRACT_FINE_RATE,
            interestBase: 'workdays',
            monthlyRate: $.ctx.constants.MONTHLY_RATE,
          },
          acquittanceLoans: {},
          product: $.nodes.request[0].output.body.product,
        });
  response:
    type: webhook-response
    parameters:
      statusCode: 200
      headers:
        Content-Type: application/json
      body:
        data: '{{$.ctx.offers}}'
  response-error-no-employment:
    type: webhook-response
    parameters:
      statusCode: 400
      body:
        code: EMPLOYMENT_NOT_FOUND
        message: "Employment not found."
  response-error-no-company:
    type: webhook-response
    parameters:
      statusCode: 400
      body:
        code: EMPLOYMENT_NOT_FOUND
        message: "No company found for the given employment."
  response-error-no-credit-policy:
    type: webhook-response
    parameters:
      statusCode: 400
      body:
        message: "No credit policy applies for the given employee."
        code: CREDIT_POLICY_NOT_FOUND
  response-error-min-credit-request:
    type: webhook-response
    parameters:
      statusCode: 400
      body:
        message: "The requested amount is less than the minimum allowed."
        code: MIN_CREDIT_REQUEST_ERROR
        details:
          minCredit: '{{ $.nodes."get-credit-policy"[0].output.minCreditRequestAmount }}'
